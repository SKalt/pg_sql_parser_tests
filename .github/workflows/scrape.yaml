# .github/workflows/ci.yml

name: Scrape

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_splitter:
    env: { CARGO_TERM_COLOR: always }
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: setup stable rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: cache cargo
        uses: Swatinem/rust-cache@v1
      - name: cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: save binary
        uses: actions/upload-artifact@v2
        with:
          name: splitter
          path: ./target/release/splitter
  build_predict:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-1.17
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: build
        run: make bin/predict
      - name: save binary
        uses: actions/upload-artifact@v2
        with:
          name: predict
          path: bin/predict
  assemble_pg_corpus:
    runs-on: ubuntu-latest
    needs: [build_splitter]
    steps:
      - uses: actions/checkout@v2
      - name: grab `splitter` binary
        uses: actions/download-artifact@v2
        with:
          name: splitter
          path: bin
      - run: chmod +x ./bin/splitter && ./bin/splitter --help
      - run: make /tmp/pg/10
      - run: make /tmp/pg/11
      - run: make /tmp/pg/12
      - run: make /tmp/pg/13
      - run: make /tmp/pg/14

      - name: cache output # the expensive step is splitting all the files
        uses: actions/cache@v2
        id: cache-corpus
        with:
          path: |
            /tmp/corpus.db
          key: "corpus-db-${{ hashFiles('/tmp/pg/**/*', './bin/splitter') }}"
      - name: assemble
        if: steps.cache-corpus.cache-hit != 'true'
        run: make /tmp/corpus.db
      - name: save db
        uses: actions/upload-artifact@v2
        with:
          name: pg_regression_corpus
          path: /tmp/corpus.db
  run_oracles:
    runs-on: ubuntu-latest
    needs: [build_predict, assemble_pg_corpus]
    services:
      pg-14:
        image: docker.io/library/postgres:14-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          PGUSER: postgres
        ports:
          - 50014:5432 # use ports in the ephemeral range
      pg-13:
        image: docker.io/library/postgres:13-alpine
        ports:
          - 50013:5432
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          PGUSER: postgres
      pg-12:
        image: docker.io/library/postgres:12-alpine
        ports:
          - 50012:5432
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          PGUSER: postgres
      pg-11:
        image: docker.io/library/postgres:11-alpine
        ports:
          - 50011:5432
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          PGUSER: postgres
      pg-10:
        image: docker.io/library/postgres:11-alpine
        ports:
          - 50010:5432
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          PGUSER: postgres
    steps:
      - uses: actions/checkout@v2
      - name: nab `predict` binary
        uses: actions/download-artifact@v2
        with:
          name: predict
          path: bin
      - name: snag `corpus.db`
        uses: actions/download-artifact@v2
        with:
          name: pg_regression_corpus
          path: /tmp/
      - run: chmod +x ./bin/predict && cp /tmp/corpus.db ./corpus.db
      - name: cache output # the expensive step is splitting all the files
        uses: actions/cache@v2
        id: cache-oracles
        with:
          path: |
            corpus.db
          key: "oracle-db-${{ hashFiles('/tmp/corpus.db', './bin/predict') }}"
      - if: steps.cache-oracles.cache-hit != 'true'
        run: bin/predict --oracles raw,do-block,pg_query --versions 10,11,12,13,14
      - uses: actions/upload-artifact@v2
        name: save oracular output
