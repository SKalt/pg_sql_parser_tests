[
  {
    "Name": "CREATE",
    "Start": 0,
    "End": 6,
    "Text": "CREATE"
  },
  {
    "Name": "FUNCTION",
    "Start": 7,
    "End": 15,
    "Text": "FUNCTION"
  },
  {
    "Name": "IDENT",
    "Start": 16,
    "End": 31,
    "Text": "insert_fraction"
  },
  {
    "Name": "ASCII_40",
    "Start": 31,
    "End": 32,
    "Text": "("
  },
  {
    "Name": "IDENT",
    "Start": 32,
    "End": 41,
    "Text": "numerator"
  },
  {
    "Name": "INT_P",
    "Start": 42,
    "End": 45,
    "Text": "int"
  },
  {
    "Name": "ASCII_44",
    "Start": 45,
    "End": 46,
    "Text": ","
  },
  {
    "Name": "IDENT",
    "Start": 47,
    "End": 58,
    "Text": "denominator"
  },
  {
    "Name": "INT_P",
    "Start": 59,
    "End": 62,
    "Text": "int"
  },
  {
    "Name": "ASCII_41",
    "Start": 62,
    "End": 63,
    "Text": ")"
  },
  {
    "Name": "RETURNS",
    "Start": 64,
    "End": 71,
    "Text": "RETURNS"
  },
  {
    "Name": "TEXT_P",
    "Start": 72,
    "End": 76,
    "Text": "text"
  },
  {
    "Name": "AS",
    "Start": 77,
    "End": 79,
    "Text": "AS"
  },
  {
    "Name": "SCONST",
    "Start": 80,
    "End": 532,
    "Text": "$$\nfrom plpy import spiexceptions\ntry:\n    plan = plpy.prepare(\"INSERT INTO fractions (frac) VALUES ($1 / $2)\", [\"int\", \"int\"])\n    plpy.execute(plan, [numerator, denominator])\nexcept spiexceptions.DivisionByZero:\n    return \"denominator cannot equal zero\"\nexcept spiexceptions.UniqueViolation:\n    return \"already have that fraction\"\nexcept plpy.SPIError as e:\n    return \"other error, SQLSTATE %s\" % e.sqlstate\nelse:\n    return \"fraction inserted\"\n$$"
  },
  {
    "Name": "LANGUAGE",
    "Start": 533,
    "End": 541,
    "Text": "LANGUAGE"
  },
  {
    "Name": "IDENT",
    "Start": 542,
    "End": 551,
    "Text": "plpythonu"
  },
  {
    "Name": "ASCII_59",
    "Start": 551,
    "End": 552,
    "Text": ";"
  }
]